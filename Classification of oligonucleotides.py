# -*- coding: utf-8 -*-
"""Group12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17TYDI8tc9VXS2czPye5OZPfarFoXbIAR
"""
# Installing required libraries

#Importing all the required libraries
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score


# Step 1: Read train.csv and test.csv files

test_df = pd.read_csv("test.csv")
train_df=pd.read_csv("train.csv")



# Step 2: Concatenate train and test data for consistency in categories
combined_df = pd.concat([train_df['Sequence'], test_df['Sequence']], axis=0)

# Add 10 nucleotides at the start and end of the sequence
combined_df = combined_df.apply(lambda x: 'N' * 10 + x + 'N' * 10)

# Step 3: One Hot Encoding
encoder = OneHotEncoder(sparse_output=False)
encoded_sequences = encoder.fit_transform(combined_df.str.split('').apply(pd.Series))

# Step 4: Split the encoded sequences back into train and test data
train_encoded = encoded_sequences[:len(train_df)]
test_encoded = encoded_sequences[len(train_df):]

# Step 5: Concatenate encoded sequences with original data for both train and test
encoded_train_df = pd.concat([train_df, pd.DataFrame(train_encoded)], axis=1)
encoded_test_df = pd.concat([test_df, pd.DataFrame(test_encoded)], axis=1)

# Step 6: Drop the original 'Sequence' column for both train and test
encoded_train_df.drop('Sequence', axis=1, inplace=True)
encoded_test_df.drop('Sequence', axis=1, inplace=True)

# Step 7: Save preprocessed data back to CSV files
encoded_train_df.to_csv('feat_train_2.csv', index=False)
encoded_test_df.to_csv('feat_test_2.csv', index=False)

# Step 8: Read preprocessed data
train_data = pd.read_csv('feat_train_2.csv')
test_data = pd.read_csv('feat_test_2.csv')

# Step 9: Separate features and target variable (if available)
X_train = train_data.drop('Label', axis=1)  # Replace 'target_column_name' with the actual name of your target column
y_train = train_data['Label']  # Replace 'target_column_name' with the actual name of your target column

# Step 10: Split data into train and test subsets
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Step 11: Initialize and train the CATBoost model
cat_model = CatBoostClassifier(iterations=1000, learning_rate=0.1, random_state=42)
cat_model.fit(X_train, y_train)

y_test_pred= cat_model.predict_proba(X_test)[:,-1]
roc= roc_auc_score(y_test, y_test_pred)
print(roc)

# Step 12: Make predictions on the test data
predictions = cat_model.predict_proba(test_data.drop('ID',axis=1))[:,-1]

test_df['Label']= predictions
test_df.drop(columns="Sequence", inplace=True)
test_df.to_csv("cat_predicted_labels_onehot10N.csv",index=False)

# Assuming y_test_pred is your predicted probabilities and y_test is the actual labels
fpr, tpr, thresholds = roc_curve(y_test, y_test_pred)

# Calculate ROC-AUC score
roc_auc = roc_auc_score(y_test, y_test_pred)

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()